---
#
# The network connection profile provides client applications the information about the target
# blockchain network that are necessary for the applications to interact with it. These are all
# knowledge that must be acquired from out-of-band sources. This file provides such a source.
#
name: "virgo"

#
# Any properties with an "x-" prefix will be treated as application-specific, exactly like how naming
# in HTTP headers or swagger properties work. The SDK will simply ignore these fields and leave
# them for the applications to process. This is a mechanism for different components of an application
# to exchange information that are not part of the standard schema described below. In particular,
# the "x-type" property with the "hlfv1" value example below is used by Hyperledger Composer to
# determine the type of Fabric networks (v0.6 vs. v1.0) it needs to work with.
#
x-type: "hlfv1"

#
# Describe what the target network is/does.
#
description: "The energy-credit network"

#
# Schema version of the content. Used by the SDK to apply the corresponding parsing rules.
#
version: "1.0.0"

client:
  organization: Org1
  connection:
    timeout:
      peer:
        endorser: '300'

# Fabric-CA is a special kind of Certificate Authority provided by Hyperledger Fabric which allows
# certificate management to be done via REST APIs. Application may choose to use a standard
# Certificate Authority instead of Fabric-CA, in which case this section would not be specified.
#
certificateAuthorities:
  ca1:
    url: https://localhost:7054
    # the properties specified under this object are passed to the 'http' client verbatim when
    # making the request to the Fabric-CA server
    httpOptions:
      verify: false
    
    grpcOptions:
      ssl-target-name-override: ca1
    
    tlsCACerts:
      path: ../../crypto-config/peerOrganizations/org1.energy-credit.com/ca/ca.org1.energy-credit.com-cert.pem

    # [Optional] The optional name of the CA.
    caName: ca-org1

# [Optional]. But most apps would have this section so that channel objects can be constructed
# based on the content below. If an app is creating channels, then it likely will not need this
# section.

channels:
  # name of the channel
  credit:
    # Required. list of orderers designated by the application to use for transactions on this
    # channel. This list can be a result of access control ("org1" can only access "ordererA"), or
    # operational decisions to share loads from applications among the orderers.  The values must
    # be "names" of orgs defined under "organizations/peers"
    orderers:
      - orderer.energy-credit.com

    # Required. list of peers from participating orgs
    peers:
      peer0.org1.energy-credit.com:
        # [Optional]. will this peer be sent transaction proposals for endorsement? The peer must
        # have the chaincode installed. The app can also use this property to decide which peers
        # to send the chaincode install request. Default: true
        endorsingPeer: true

        # [Optional]. will this peer be sent query proposals? The peer must have the chaincode
        # installed. The app can also use this property to decide which peers to send the
        # chaincode install request. Default: true
        chaincodeQuery: true

        # [Optional]. will this peer be sent query proposals that do not require chaincodes, like
        # queryBlock(), queryTransaction(), etc. Default: true
        ledgerQuery: true

        # [Optional]. will this peer be the target of the SDK's listener registration? All peers can
        # produce events but the app typically only needs to connect to one to listen to events.
        # Default: true
        eventSource: true
      
      peer1.org1.energy-credit.com:
        endorsingPeer: true
        chaincodeQuery: true
        ledgerQuery: true
        eventSource: true
      
      peer2.org1.energy-credit.com:
        endorsingPeer: false
        chaincodeQuery: true
        ledgerQuery: true
        eventSource: true

# List of orderers to send transaction and channel create/update requests to. For the time
# being only one orderer is needed. If more than one is defined, which one get used by the
# SDK is implementation specific. Consult each SDK's documentation for its handling of orderers.
#
orderers:
  orderer.energy-credit.com:
    url: grpcs://localhost:7050

    # these are standard properties defined by the gRPC library
    # they will be passed in as-is to gRPC client constructor
    grpcOptions:
      ssl-target-name-override: orderer.energy-credit.com
    
    tlsCACerts:
      path: ../../crypto-config/ordererOrganizations/energy-credit.com/orderers/orderer.energy-credit.com/tls/ca.crt

#
# List of peers to send various requests to, including endorsement, query
# and event listener registration.
#
peers:
  peer0.org1.energy-credit.com:
    # this URL is used to send endorsement and query requests
    url: grpcs://localhost:7051
    # eventUrl: grpcs://localhost:7053

    grpcOptions:
      ssl-target-name-override: peer0.org1.energy-credit.com
      hostnameOverride: peer0.org1.energy-credit.com
      request-timeout: 120001
    
    tlsCACerts:
      path: ../../crypto-config/peerOrganizations/org1.energy-credit.com/peers/peer0.org1.energy-credit.com/tls/ca.crt
  
  peer1.org1.energy-credit.com:
    # this URL is used to send endorsement and query requests
    url: grpcs://localhost:8051
    # eventUrl: grpcs://localhost:8053

    grpcOptions:
      ssl-target-name-override: peer1.org1.energy-credit.com
      hostnameOverride: peer1.org1.energy-credit.com
      request-timeout: 120001
    
    tlsCACerts:
      path: ../../crypto-config/peerOrganizations/org1.energy-credit.com/peers/peer1.org1.energy-credit.com/tls/ca.crt
  
  peer2.org1.energy-credit.com:
    # this URL is used to send endorsement and query requests
    url: grpcs://localhost:9051
    # eventUrl: grpcs://localhost:8053

    grpcOptions:
      ssl-target-name-override: peer2.org1.energy-credit.com
      hostnameOverride: peer2.org1.energy-credit.com
      request-timeout: 120001
    
    tlsCACerts:
      path: ../../crypto-config/peerOrganizations/org1.energy-credit.com/peers/peer2.org1.energy-credit.com/tls/ca.crt

#
# list of participating organizations in this network
#
organizations:
  Org1:
    mspid: Org1MSP

    peers:
      - peer0.org1.energy-credit.com
      - peer1.org1.energy-credit.com
      - peer2.org1.energy-credit.com

    # [Optional]. Certificate Authorities issue certificates for identification purposes in a Fabric based
    # network. Typically certificates provisioning is done in a separate process outside of the
    # runtime network. Fabric-CA is a special certificate authority that provides a REST APIs for
    # dynamic certificate management (enroll, revoke, re-enroll). The following section is only for
    # Fabric-CA servers.
    certificateAuthorities:
      - ca1